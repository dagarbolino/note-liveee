datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  stripeCustomerId String?      @unique
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Notes Notes[]
  subscription Subscription[]

  Curriculums Curriculums[]
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}



model Subscription {
  stripSubscriptionId String @id @unique
  interval String
  status String
  planId String
  currentPeriodStart Int
  curretPeriodEnd Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @unique

  user User @relation(fields: [userId], references: [id])
}


model Notes {
  id String @id @unique @default(cuid())
  title String
  description String
  completed Boolean @default(false)
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields:[userId], references: [id], onDelete: Cascade)
}


model Curriculums {
  id          String    @id @default(cuid())
  title       String
  description String
  completed   Boolean   @default(false)
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  contact_details Contact_details?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Contact_details {
  id           String  @id @default(cuid())
  last_name    String
  first_name   String
  postTitle    String   
  photoUrl     String?
  email        String  @unique
  linkedin     String?
  phone        String  
  curriculumsId String @unique

  curriculums Curriculums @relation(fields: [curriculumsId], references: [id], onDelete: Cascade)
}


